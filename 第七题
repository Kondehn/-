#include <math.h>
#include <ctype.h>
#include <ctime>
#include<iostream>
#include<vector>
#include<fstream>
#include<string>
#include<cassert>
#include "CityInfo.h"

using namespace std;

#define G(x) ((1.0+tanh(x/u0))/2.0)
#define pi 3.1415926
double u0=0.02;

vector<CityInfo>CreateCities(int Num){
	vector<CityInfo> City;
	City.resize(Num);
	for(int i=0;i<Num;i++){
		City[i].SetCityIndex(i);
		double t=((rand())%32767)/(float)32767;
		City[i].SetCoordx(t);
		t=((rand())%32767)/(float)32767;
		City[i].SetCoordy(t);
	}
	return City;
}


vector<double> SetBias(vector<CityInfo>City){
	vector<double> Bias;
	double d1=0.0,d2=0.0,d3=0.0,d4=0.0;
	for(int i=0;i<City.size();i++){
		d1=(City[i].GetCoordy()-0.5)/(City[i].GetCoordx()-0.5);
		d2=atan(d1); 
		d3=hypot(City[i].GetCoordx()-0.5,City[i].GetCoordy()-0.5);
		for(int j=0;j<City.size();j++){
			d4=d2+(j-1)*2*pi*d3/(float)City.size();
			Bias.push_back(cos(d4));
		}
	}
	return Bias;
}

double CompEngery(vector<CityInfo> city,vector<double> & u,vector<double> & v,double A,double B,double C,double D){
	int i,j,x,y;  
	double delt=0,E=0,k=0,h=0.01;
	double J1=0.0,J2=0.0,J3=0.0,J=0.0;
	int Num=city.size();
	for(x=0;x<Num;x++)   
		for(i=0;i<Num-1;i++)
			for(j=i+1;j<Num;j++)
				J1+=v[x*Num+i]*v[x*Num+j];//J1+=v[x][i]*v[x][j]
	for(i=0;i<Num;i++)
		for(x=0;x<Num-1;x++)
			for(y=x+1;y<Num;y++)
				J2+=v[x*Num+i]*v[y*Num+i];//j2+=v[x][i]*v[y][i]
	for(x=0;x<Num;x++)
		for(i=0;i<Num;i++)      
			k+=v[x*Num+i]; 
	J3=(k-Num)*(k-Num);
	for(x=0;x<Num;x++){
		for(y=0;y<Num;y++){    
			for(i=0;i<Num;i++){  
				if(i==0)  
					J+=city[x].GetCityDis(city[y])*v[x*Num+i]*(v[y*Num+Num-1]+v[y*Num+i+1]); //J+=dis[x][y]*v[x][i]*(v[y][N-1]+v[y][i+1]
				else if (i==Num-1)   
					J+=city[x].GetCityDis(city[y])*v[x*Num+i]*(v[y*Num+i-1]+v[y*Num]);//J+=dis[x][y]*v[x][i]*(v[y][i-1]+v[y][0])
				else             
					J+=city[x].GetCityDis(city[y])*v[x*Num+i]*(v[y*Num+i-1]+v[y*Num+i+1]);  
			}        
		}    
	}      
	E=A*J1/2+B*J2/2+C*J3/2+D*J/2;
	for(x=0;x<Num;x++){
		for(i=0;i<Num;i++){
			delt=0-u[x*Num+i];//u[x][i]

			for(j=0;j<Num;j++){
				if(i==j)
					continue;
				delt-=A*v[x*Num+j];
			}

			for(y=0;y<Num;y++){
				if(x==y) 
					continue;  
				delt-=B*v[y*Num+i];
			} 

			delt-=C*(k-Num);//k=Sum(v[x][i])
			for(y=0;y<Num;y++){
				if(i==0)     
					delt-=D*city[x].GetCityDis(city[y])*(v[y*Num+Num-1]+v[y*Num+i+1]);   
				else if (i==Num-1)   
					delt-=D*city[x].GetCityDis(city[y])*(v[y*Num+i-1]+v[y*Num]);    
				else             
					delt-=D*city[x].GetCityDis(city[y])*(v[y*Num+i-1]+v[y*Num+i+1]);
			}
			u[x*Num+i]+=h*delt;
			v[x*Num+i]=G(u[x*Num+i]); //v[x][i]=G(u[x][i])
		}
	}
	return E;
}
bool ReVaild(vector<int> Router){
	for(int i=0;i<Router.size();i++){
		for(int j=i+1;j<Router.size();j++){			
			if(Router[i]==Router[j] || Router[i]<0 || Router[i]>Router.size()-1)
				return false;			
		}
	}
	return true;
}
void PrintCity(vector<CityInfo> City){
	for(int i=0;i<City.size();i++)
		cout<<City[i].GetCityIndex()<<"	"<<City[i].GetCoordx()<<"	"<<City[i].GetCoordy()<<endl;
}

void HOP_TSP(int Num)
{
	ofstream outfile;
	string name;
	vector<CityInfo>City;
    vector<int>Router;
	vector<double>InitBias;
	vector<double>InSig,OutSig;
	int CityNum=Num;
	double TotalDis=0.0,E=0.0,u0=0.02;
double MinTotalDis;
vector<int>MinRouter;
	City=CreateCities(CityNum);
	
	InitBias=SetBias(City);
	Router.resize(CityNum);

	InSig.resize(CityNum*CityNum);
	OutSig.resize(CityNum*CityNum);
	
	name="result.txt";
	outfile.open(name.c_str(),ofstream::app);
	if (!outfile){
		cout<<"Output file "<<name<<" opening failed!"<<endl;
		exit(1);
	}
	else{
		outfile<<CityNum<<endl;
		outfile<<CityNum<<"个城市坐标"<<endl;
		for(int i=0;i<City.size();i++)
			outfile<<"第"<<City[i].GetCityIndex()<<"城市"<<"  "<<City[i].GetCoordx()<<"	"<<City[i].GetCoordy()<<endl;
		outfile<<"**********************************************"<<endl;
		for(double dd=0.05;dd<0.31;dd+=0.05){
			MinTotalDis=20.0;///++

			cout<<"--------------------------"<<"A=B=C="<<dd<<"	"<<"D=0.1"<<"-------------------------"<<endl;
			outfile<<"--------------------------"<<"A=B=C="<<dd<<"	"<<"D=0.1"<<"-------------------------"<<endl;
			for(int it=0;it<20;it++){
				int ItNum=0;
				
				double u00=0-u0*log(CityNum-1)/2;
				for(i=0;i<CityNum*CityNum;i++){  
					double t=((rand())%32767)/(float)32767;
					InSig[i]=u00+0.001*(t*2-1)*InitBias[i];
					OutSig[i]=G(InSig[i]); 
				}
				double temp=0;
				assert(InSig.size()==CityNum*CityNum);
				assert(OutSig.size()==CityNum*CityNum);
				
				do{
					E=CompEngery(City,InSig,OutSig,dd,dd,dd,0.1);
				if(fabs(E-temp)<1e-20)
					break;
					temp=E;
					ItNum++;
				}while(ItNum<9000);
				cout<<"iterations="<<ItNum<<"	"<<"E="<<E<<endl;
			
				int i,j,k=0;
				int count=0;
				
				TotalDis=0.0;
				for(j=0;j<CityNum;j++){
					if(OutSig[j*CityNum]>=0.2){
						k=j;
						Router[count]=j;
						count+=1;
						break;
					}
				}
				for(i=1;i<CityNum;i++){
					for(j=0;j<CityNum;j++){
						if(OutSig[j*CityNum+i]>=0.2){//凡置换矩阵中，大于0.2的状态，认为是正确的路径结点
							Router[count]=j;
							count+=1;
							TotalDis+=City[k].GetCityDis(City[j]); 	         
							k=j;  
							break;    
						}
					}
				}
				TotalDis+=City[k].GetCityDis(City[Router[0]]);

				if(ReVaild(Router)){
					if(TotalDis<MinTotalDis)////++
					{
						MinTotalDis = TotalDis;
						MinRouter = Router;
					}

					cout<<"right path"<<endl;
					cout<<"TotaoDis="<<TotalDis<<endl; 
					for(int i=0;i<CityNum;i++)
						cout<<Router[i]<<"	";
						//输入到文件中
						outfile<<endl;
						outfile<<"iterations="<<ItNum<<"	"<<"E="<<E<<endl;
						
						outfile<<it+1<<"	";
						outfile<<"right path"<<endl; 
						outfile<<"TotaoDis="<<TotalDis<<endl;
						
						for(i=0;i<CityNum;i++)
							outfile<<Router[i]<<"	";
						outfile<<endl;
					}
				else{
					cout<<"wrong path"<<endl;
				}

			}
			if(MinTotalDis!=20.0)
			{
				cout<<endl;
				outfile<<"最短路径长度："<<MinTotalDis;
				outfile<<"	最小路径为：";
				cout<<"最短路径长度："<<MinTotalDis;
				cout<<"	最小路径为：";
				for(int ki=0;ki<CityNum;ki++)
				{
					cout<<MinRouter[ki]<<"  ";
					outfile<<MinRouter[ki]<<"  ";
				}
				cout<<endl;
			}
		}
	}
	outfile<<"**********************************************"<<endl;
	outfile<<endl<<endl<<endl;
	outfile.close();
}

void main(){
	clock_t begin,finish;
	srand((unsigned int) time(NULL));
	begin=clock();
	int Num;
	cout<<"CityNum:	";
	cin>>Num;
	HOP_TSP(Num);
	finish = clock();
}
